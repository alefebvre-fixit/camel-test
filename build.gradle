apply plugin: 'java'

//https://docs.gradle.org/current/userguide/application_plugin.html
apply plugin: 'application'

apply plugin: "com.github.johnrengelman.shadow"

apply plugin: 'eclipse'
apply plugin: 'idea'

version = '1.0'
sourceCompatibility=1.7
targetCompatibility=1.7

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}


buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'http://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: 'se.transmode.gradle', name: 'gradle-docker', version: '1.2'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

/*
jar {
	doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
    manifest {
        attributes 'Main-Class': 'ya.camel.CamelStarter'
    }
}
*/



repositories {
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://repo.maven.apache.org/maven2' }
}


dependencies {
  compile group: 'org.apache.camel', name: 'camel-core', version: camel_version
  compile group: 'org.apache.camel', name: 'camel-jetty', version: camel_jetty_version

  compile group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
  compile group: 'org.slf4j', name: 'slf4j-simple', version: slf4j_version


  testCompile group: 'junit', name: 'junit', version: '4.+'
}

//Application setup
mainClassName = "ya.camel.CamelStarter"


apply plugin: 'docker'


task buildDocker(type: Docker, dependsOn: shadowJar) {
    push = false
    tag = 'camel-test'
    tagVersion = 'latest'
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {    
        copy {
            from "src/main/docker/"
            into stageDir
            include "*.*"
        }
        copy {
            from "build/libs"
            into stageDir
            include "*.jar*"
        }
    }
}


